#include<iostream>
#include<stack>
#include<queue>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<list>
#include<string>
#include<cstring>
#include<map>
#include<numeric>
#include<sstream>
#include<cmath>
using namespace std;
#define all(v) (v).begin(), (v).end()
#define rall(v) (v).rbegin(), (v).rend()
#define pb push_back
#define f(i,x,y) for(int i = x; i<y; i++ )
#define FORV(it,A) for(vector<int>::iterator it = A.begin(); it!= A.end(); it++)
#define FORS(it,A) for(set<int>::iterator it = A.begin(); it!= A.end(); it++)
#define quad(x) (x) * (x)
#define mp make_pair
#define clr(x, y) memset(x, y, sizeof x)
#define fst first
#define snd second
#ifdef DEBUG
#define debug(x) x
#else
#define debug(x)
#endif
typedef pair<int, int> pii;
typedef long long ll;
typedef long double ld;

int qtd_cenarios, qtd_papers, qtd_consultas, qtd_autores;
map<int, string> nomes;
map<string, int> vertices;
vector<string> papers;


int main(){
	stringstream ss;
	char c;
	
	cin >> qtd_cenarios;
	
	string nome;
	f(i, 0, qtd_cenarios){
		qtd_autores = 0;
		
		cin >> qtd_papers >> qtd_consultas;
		getchar();
		
		string linha;
		f(j, 0, qtd_papers){
			getline(cin, linha);
			int k = 0;
			
			do{
				ss.clear();
				while((c = linha[k++]) && c != ','){
					ss << c;
				}
				ss << c;
				while((c = linha[k++]) && (c != ',' || c != ':')){
					ss << c;
				}
		
				nome = ss.str();
				debug(cout << nome << endl);
				if(vertices.find(nome) == vertices.end()){
					vertices[nome] = qtd_autores;
					nomes[qtd_autores] = nome;
					qtd_autores++;
				}
				
			} while(c != ':');
		}		
			
	}
	
	return 0;
}
